import { RouteType } from "./types/types";

const genCode = ({ variables, routeTree, config }: any) =>
  `/* **************************************************************
* This file is generated by the router-plugin. Do not edit!
* **************************************************************
*/

import { AnyRoute, RouteOptions, createRoute } from "@tanstack/react-router";
${variables}

${config}

${routeTree}

declare module '@tanstack/react-router' {
  interface Register {
    router: typeof routeTree
  }
}`;

const genVariableCode = (route: RouteType): string => {
  if (route.type !== "route") {
    return `import { Route as ${route.id}${
      route.type !== "root" ? "Import" : ""
    } } from "${route.importPath}";`;
  } else {
    return "";
  }
};

const genVariables = (routes: RouteType[]) => {
  return routes
    .map(genVariableCode)
    .filter(x => !!x)
    .join("\n");
};

const genConfigCode = (route: RouteType): string => {
  switch (route.type) {
    // case "route":
    //   return `const ${route.id} = ${route.id}Import.update ({
    //     path: "${route.path}",
    //     getParentRoute: () => ${route.parent}
    //   });`;

    case "index":
      return `const ${route.id} = ${route.id}Import.update ({
  path: "/",
  getParentRoute: () => ${route.parent}
} as RouteOptions<any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any>) as AnyRoute;`;
    case "layout":
      return `const ${route.id} = ${route.id}Import.update ({
  // path: "/",
  id: "${route.id}",
  getParentRoute: () => ${route.parent}
} as RouteOptions<any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any>) as AnyRoute;`;
    case "route":
      return `const ${route.id} = createRoute({
  path: "${route.path}",
  getParentRoute: () => ${route.parent}
} as RouteOptions<any, any, any, any, any, any, any, any, any, any, any, any, any, any, any, any>) as AnyRoute;`;

    default:
      return "";
  }
};

const genConfig = (routes: RouteType[]) => {
  return routes
    .map(genConfigCode)
    .filter(x => x.length > 0)
    .join("\n\n");
};

const findChildren = (routes: RouteType[], parent: string) => {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  return routes.filter(route => (route as any).parent === parent);
};

const ident = (n: number) => new Array(n * 2 + 1).join(" ");

function genRouteTreeNodeCode(
  routes: RouteType[],
  node: string,
  depth: number
): string {
  const children = findChildren(routes, node);

  if (node === "NotFound") return "";
  if (children.length === 0) {
    return `${node}`;
  }

  return `${depth > 0 ? "\n" : ""}${ident(depth)}${node}.addChildren([${children
    .map(c => genRouteTreeNodeCode(routes, c.id, depth + 1))
    .join(",")}${depth === 0 ? "\n" : ""}])`;
}

const genRouteTreeCode = (routes: RouteType[]) => {
  const root = routes.find(route => !("parent" in route))?.id;

  if (!root) throw new Error("Root object not found");

  return `export const routeTree = ${genRouteTreeNodeCode(routes, root, 0)};`;
};

// const routesOrder = {
//   root: -1,
//   index: 0,
//   layout: 1,
//   route: 2,
//   notFound: 3,
// } as const;

export const createRouterCode = ({ routes }: { routes: RouteType[] }) => {
  // const sortedRoutes = routes.sort((a, b) => {
  //   return routesOrder[a.type] - routesOrder[b.type];
  // });

  const variables = genVariables(routes);
  const config = genConfig(routes);
  const routeTree = genRouteTreeCode(routes);

  const code = genCode({ variables, routeTree, config });

  return code;
};
